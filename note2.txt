class LibraryBook {
    Checkout(): this {
        // do checkout stuff
        console.log('Checking out a book.');
        return this;
    }

    Checkin(): this {
        // do checkin stuff
        // console.log('Checking in a book');
        if (this instanceof ChildrenBook) {
            console.log('Cheking in ChildrensBook.');
        }

        if (this instanceof EletronicBook) {
            console.log('Cheking in ElectronicBook.');
        }
        return this;
    }
}

class ChildrenBook extends LibraryBook {
    Clean(): this {
        // clean the crayon marks
        console.log('Cleaning a book.');
        return this;
    }
}

class EletronicBook extends LibraryBook {
    RemoveFromCustomerDevice(): this {
        console.log('Removing book from device.');
        return this;
    }
}

/* let kidbook = new ChildrenBook();
kidbook.Checkin()
    .Clean()
    .Checkout();

let ebook = new EletronicBook();
ebook.Checkin()
    .RemoveFromCustomerDevice()
    .Checkout(); */

/* let mergedBook: Book;
mergedBook.publisher = 'Programming Press'; */

/* let newLibrarian = new UniversityLibrarian();
newLibrarian.phone = '555-6789';
newLibrarian.hostSeminar('British Literature'); */

function logVisitor(param: number | string) {
    if (typeof param === 'number') {
        console.log(`${param} new visitors arrived.`);
    } else {
        console.log(`${param.toUpperCase()} visited`); 
    }
}
/* 
logVisitor(5);
logVisitor('Leigh Ann'); */

/* let lib: Librarian = new PublicLibrarian();

if (lib instanceof UniversityLibrarian) {
    lib.assistFaculty();
}

if (lib instanceof PublicLibrarian) {
    lib.teachCommunity();
} */

/* function isBook(text: Book | Magazine): text is Book {
    return true; //(<Book>text).author !== undefined;
}

let readdingMaterial: Book | Magazine = util.GetAllMagazines()[0];

if (isBook(readdingMaterial)) {
    console.log(`The book's author is ${readdingMaterial.author}`);
} else {
    console.log(`The magazine's publisher is ${readdingMaterial.publisher}.`);
} */

const sym = Symbol('sym'); // can be used as an indexer
const second_symbol: unique symbol = Symbol('second_symbol'); // can be used as an index

const mySymbol = Symbol('first_symbol');
let anotherSymbol = Symbol('first_symbol');

/* console.log(mySymbol === anotherSymbol);
console.log(typeof mySymbol === 'symbol'); */

let myObject = {
    [mySymbol]: 'value of my symbol key'
}

// console.log(myObject[mySymbol]);

let librarian = new UniversityLibrarian();
// librarian[CLASS_INFO]();

let librarianCustomer = {
    name: 'Thorne',
    assistCustomer: (custName: string) => console.log(`Assisting ${custName}`)
}

if (librarianCustomer instanceof UniversityLibrarian) {
    console.log('A helful librarian.');
} else {
    console.log('Not a librarian.');
}